#pragma once
#include "GBackend/GBackendDevice.h"
#include "Components/GComponents.h"
#include "../Shaders/ShaderInterop.h"

using namespace vz::graphics;
namespace vz::shader
{
	enum SHADERTYPE : uint32_t
	{
		// NOTE :
		//	* currently (24.10.03) provides only VER 0.1 marked shader types
		//	* post-pix naming "EMULATION" refers to additional shader for unsupported shader feature

		////////////////////
		// vertex shaders //
		VSTYPE_MESH_DEBUG,		
		VSTYPE_MESH_COMMON,		
		VSTYPE_MESH_SIMPLE,		
		VSTYPE_OCCLUDEE,		
		VSTYPE_VERTEXCOLOR,

		VSTYPE_MESH_COMMON_TESSELLATION,

		VSTYPE_MESH_PREPASS,
		VSTYPE_MESH_PREPASS_ALPHATEST,
		VSTYPE_MESH_PREPASS_TESSELLATION,
		VSTYPE_MESH_PREPASS_ALPHATEST_TESSELLATION,

		VSTYPE_ENVMAP,

		VSTYPE_SHADOW_TRANSPARENT,
		VSTYPE_SHADOW_ALPHATEST,
		VSTYPE_SHADOW,

		VSTYPE_VOXELIZER,

		//////////////////////
		// geometry shaders //
		GSTYPE_VOXELIZER,
		GSTYPE_ENVMAP_EMULATION,
		GSTYPE_SHADOW_TRANSPARENT_EMULATION,
		GSTYPE_SHADOW_ALPHATEST_EMULATION,
		GSTYPE_SHADOW_EMULATION,
		GSTYPE_LINE_ASSIGNTHICKNESS,

		//////////////////
		// hull shaders //
		HSTYPE_MESH,
		HSTYPE_MESH_PREPASS,
		HSTYPE_MESH_PREPASS_ALPHATEST,

		////////////////////
		// domain shaders //
		DSTYPE_MESH,
		DSTYPE_MESH_PREPASS,
		DSTYPE_MESH_PREPASS_ALPHATEST,

		///////////////////
		// pixel shaders //
		PSTYPE_MESH_DEBUG,	 // debug output (to final render target)
		PSTYPE_MESH_SIMPLE,	 // no shading (to final render target)
		PSTYPE_VERTEXCOLOR,

		PSTYPE_MESH_PREPASS,
		PSTYPE_MESH_PREPASS_ALPHATEST,
		PSTYPE_MESH_PREPASS_DEPTHONLY,
		PSTYPE_MESH_PREPASS_DEPTHONLY_ALPHATEST,

		PSTYPE_SHADOW_TRANSPARENT,
		PSTYPE_SHADOW_ALPHATEST,

		PSTYPE_ENVMAP,

		PSTYPE_VOXELIZER,

		PSTYPE_RENDERABLE_PERMUTATION__BEGIN, 
		PSTYPE_RENDERABLE_PERMUTATION__END = PSTYPE_RENDERABLE_PERMUTATION__BEGIN + SHADERTYPE_BIN_COUNT, 
		PSTYPE_RENDERABLE_TRANSPARENT_PERMUTATION__BEGIN,
		PSTYPE_RENDERABLE_TRANSPARENT_PERMUTATION__END = PSTYPE_RENDERABLE_TRANSPARENT_PERMUTATION__BEGIN + SHADERTYPE_BIN_COUNT,

		CSTYPE_VIEW_SURFACE_PERMUTATION__BEGIN,
		CSTYPE_VIEW_SURFACE_PERMUTATION__END = CSTYPE_VIEW_SURFACE_PERMUTATION__BEGIN + SHADERTYPE_BIN_COUNT,
		CSTYPE_VIEW_SURFACE_REDUCED_PERMUTATION__BEGIN,
		CSTYPE_VIEW_SURFACE_REDUCED_PERMUTATION__END = CSTYPE_VIEW_SURFACE_REDUCED_PERMUTATION__BEGIN + SHADERTYPE_BIN_COUNT,

		CSTYPE_VIEW_SHADE_PERMUTATION__BEGIN,
		CSTYPE_VIEW_SHADE_PERMUTATION__END = CSTYPE_VIEW_SHADE_PERMUTATION__BEGIN + SHADERTYPE_BIN_COUNT,

		CSTYPE_MESHLET_PREPARE, // to save GBffuer size: refers to "view_resolveCS.hlsl"

		CSTYPE_VIEW_RESOLVE, 
		CSTYPE_VIEW_RESOLVE_MSAA,
		CSTYPE_LIGHTCULLING_ADVANCED, 
		CSTYPE_LIGHTCULLING_ADVANCED_DEBUG,
		CSTYPE_LIGHTCULLING_DEBUG,
		CSTYPE_LIGHTCULLING, 

		// Direct Volume Rendering and Mesh Slicer
		// PERMUTATION__BEGIN/END
		CSTYPE_DVR_WoKB,
		CSTYPE_DVR_XRAY_WoKB,

		CSTYPE_DVR_SLICER_2KB,
		CSTYPE_DVR_SLICER_XRAY_2KB,

		CSTYPE_DVR_SLICER_CURVED_2KB,
		CSTYPE_DVR_SLICER_CURVED_XRAY_2KB,

		CSTYPE_DVR_SLICER_NOTHICKNESS,
		CSTYPE_DVR_SLICER_CURVED_NOTHICKNESS,

		CSTYPE_MESH_SLICER, 
		CSTYPE_MESH_CURVED_SLICER, 
		CSTYPE_SLICER_OUTLINE, 
		CSTYPE_SLICE_RESOLVE_KB2, 

		// Gaussian Splatting
		//CSTYPE_GAUSSIANSPLATTING_KICKOFF,
		CSTYPE_GAUSSIANSPLATTING_PREPROCESS,
		//CSTYPE_GAUSSIANSPLATTING_GAUSSIAN_OFFSET,
		CSTYPE_GAUSSIANSPLATTING_DUPLICATED_GAUSSIANS,
		CSTYPE_GAUSSIANSPLATTING_RADIX_HIST_GAUSSIANS,
		CSTYPE_GAUSSIANSPLATTING_RADIX_SORT_GAUSSIANS,
		CSTYPE_GAUSSIANSPLATTING_IDENTIFY_TILE_RANGES,
		CSTYPE_GAUSSIANSPLATTING_RENDER_GAUSSIAN,

		// Post-Processing Chain
		CSTYPE_POSTPROCESS_TONEMAP,
		CSTYPE_POSTPROCESS_TEMPORALAA,

		// Difered Mipmap
		CSTYPE_GENERATEMIPCHAINCUBEARRAY_FLOAT4,
		CSTYPE_GENERATEMIPCHAINCUBEARRAY_UNORM4,
		CSTYPE_GENERATEMIPCHAINCUBE_FLOAT4,
		CSTYPE_GENERATEMIPCHAINCUBE_UNORM4,
		CSTYPE_GENERATEMIPCHAIN2D_FLOAT4,
		CSTYPE_GENERATEMIPCHAIN2D_UNORM4,
		CSTYPE_GENERATEMIPCHAIN3D_FLOAT4,
		CSTYPE_GENERATEMIPCHAIN3D_UNORM4,

		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_FLOAT1,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_FLOAT3,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_FLOAT4,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_UNORM1,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_UNORM4,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_WIDE_FLOAT1,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_WIDE_FLOAT3,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_WIDE_FLOAT4,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_WIDE_UNORM1,
		CSTYPE_POSTPROCESS_BLUR_GAUSSIAN_WIDE_UNORM4,

		CSTYPE_BLOCKCOMPRESS_BC1,
		CSTYPE_BLOCKCOMPRESS_BC3,
		CSTYPE_BLOCKCOMPRESS_BC4,
		CSTYPE_BLOCKCOMPRESS_BC5,
		CSTYPE_BLOCKCOMPRESS_BC6H_CUBEMAP,
		CSTYPE_BLOCKCOMPRESS_BC6H,

		CSTYPE_WETMAP_UPDATE, 


		///////////////////
		// mesh shaders //
		ASTYPE_MESH, // (Future Work) for mesh shader
		MSTYPE_MESH, // (Future Work) for mesh shader
		MSTYPE_MESH_PREPASS_ALPHATEST, // (Future Work) for mesh shader
		MSTYPE_MESH_PREPASS, // (Future Work) for mesh shader
		MSTYPE_SHADOW_TRANSPARENT, // (Future Work) for mesh shader
		MSTYPE_SHADOW_ALPHATEST, // (Future Work) for mesh shader
		MSTYPE_SHADOW, // (Future Work) for mesh shader

		SHADERTYPE_COUNT,
	};
	static_assert(SHADERTYPE_BIN_COUNT == SCU32(MaterialComponent::ShaderType::COUNT));

	enum SHAPE_RENDERING
	{
		SHAPE_RENDERING_LINES,
		SHAPE_RENDERING_LINES_DEPTH,
		SHAPE_RENDERING_COUNT
	};

	bool LoadShader(
		ShaderStage stage,
		Shader& shader,
		const std::string& filename,
		ShaderModel minshadermodel = graphics::ShaderModel::SM_6_0,
		const std::vector<std::string>& permutation_defines = {}
	);

	void LoadShaders();

	void Initialize();
	void Deinitialize();
}