#pragma once
#include "CommonInclude.h"
#include "vzEnums.h"
#include "vzGraphicsDevice.h"
#include "vzScene.h"
#include "vzECS.h"
#include "vzRectPacker.h"
#include "vzPrimitive.h"
#include "vzCanvas.h"
#include "vzMath.h"
#include "shaders/ShaderInterop_Renderer.h"
#include "shaders/ShaderInterop_SurfelGI.h"
#include "vzVector.h"

#include <memory>
#include <limits>

namespace vz
{
	struct VoxelGrid;
	struct PathQuery;
}

namespace vz::renderer
{
	constexpr vz::graphics::Format format_depthbuffer_main = vz::graphics::Format::D32_FLOAT_S8X24_UINT;
	constexpr vz::graphics::Format format_rendertarget_main = vz::graphics::Format::R11G11B10_FLOAT;
	constexpr vz::graphics::Format format_idbuffer = vz::graphics::Format::R32_UINT;
	constexpr vz::graphics::Format format_rendertarget_shadowmap = vz::graphics::Format::R16G16B16A16_FLOAT;
	constexpr vz::graphics::Format format_depthbuffer_shadowmap = vz::graphics::Format::D16_UNORM;
	constexpr vz::graphics::Format format_rendertarget_envprobe = vz::graphics::Format::R11G11B10_FLOAT;
	constexpr vz::graphics::Format format_depthbuffer_envprobe = vz::graphics::Format::D16_UNORM;

	constexpr uint8_t raytracing_inclusion_mask_shadow = 1 << 0;
	constexpr uint8_t raytracing_inclusion_mask_reflection = 1 << 1;

	constexpr uint32_t CombineStencilrefs(vz::enums::STENCILREF engineStencilRef, uint8_t userStencilRef)
	{
		return (userStencilRef << 4) | static_cast<uint8_t>(engineStencilRef);
	}
	constexpr XMUINT2 GetEntityCullingTileCount(XMUINT2 internalResolution)
	{
		return XMUINT2(
			(internalResolution.x + TILED_CULLING_BLOCKSIZE - 1) / TILED_CULLING_BLOCKSIZE,
			(internalResolution.y + TILED_CULLING_BLOCKSIZE - 1) / TILED_CULLING_BLOCKSIZE
		);
	}
	constexpr XMUINT2 GetVisibilityTileCount(XMUINT2 internalResolution)
	{
		return XMUINT2(
			(internalResolution.x + VISIBILITY_BLOCKSIZE - 1) / VISIBILITY_BLOCKSIZE,
			(internalResolution.y + VISIBILITY_BLOCKSIZE - 1) / VISIBILITY_BLOCKSIZE
		);
	}

	const vz::graphics::Sampler* GetSampler(vz::enums::SAMPLERTYPES id);
	const vz::graphics::Shader* GetShader(vz::enums::SHADERTYPE id);
	const vz::graphics::InputLayout* GetInputLayout(vz::enums::ILTYPES id);
	const vz::graphics::RasterizerState* GetRasterizerState(vz::enums::RSTYPES id);
	const vz::graphics::DepthStencilState* GetDepthStencilState(vz::enums::DSSTYPES id);
	const vz::graphics::BlendState* GetBlendState(vz::enums::BSTYPES id);
	const vz::graphics::GPUBuffer* GetBuffer(vz::enums::BUFFERTYPES id);
	const vz::graphics::Texture* GetTexture(vz::enums::TEXTYPES id);

	// Returns a buffer preinitialized for quad index buffer laid out as:
	//	vertexID * 4 + [0, 1, 2, 2, 1, 3]
	const vz::graphics::GPUBuffer& GetIndexBufferForQuads(uint32_t max_quad_count);

	void ModifyObjectSampler(const vz::graphics::SamplerDesc& desc);

	// Initializes the renderer
	void Initialize();

	// Clears the scene and the associated renderer resources
	void ClearWorld(vz::scene::Scene& scene);

	// Returns the shader binary directory
	const std::string& GetShaderPath();
	// Sets the shader binary directory
	void SetShaderPath(const std::string& path);
	// Returns the shader source directory
	const std::string& GetShaderSourcePath();
	// Sets the shader source directory
	void SetShaderSourcePath(const std::string& path);
	// Reload shaders
	void ReloadShaders();
	// Returns how many shaders are embedded (if wiShaderDump.h is used)
	//	wiShaderDump.h can be generated by OfflineShaderCompiler.exe using shaderdump argument
	size_t GetShaderDumpCount();
	size_t GetShaderErrorCount();
	size_t GetShaderMissingCount();

	bool LoadShader(
		vz::graphics::ShaderStage stage,
		vz::graphics::Shader& shader,
		const std::string& filename,
		vz::graphics::ShaderModel minshadermodel = vz::graphics::ShaderModel::SM_6_0,
		const vz::vector<std::string>& permutation_defines = {}
	);


	struct Visibility
	{
		// User fills these:
		uint32_t layerMask = ~0u;
		const vz::scene::Scene* scene = nullptr;
		const vz::scene::CameraComponent* camera = nullptr;
		enum FLAGS
		{
			EMPTY = 0,
			ALLOW_OBJECTS = 1 << 0,
			ALLOW_LIGHTS = 1 << 1,
			ALLOW_DECALS = 1 << 2,
			ALLOW_ENVPROBES = 1 << 3,
			ALLOW_EMITTERS = 1 << 4,
			//ALLOW_HAIRS = 1 << 5,
			ALLOW_REQUEST_REFLECTION = 1 << 6,
			ALLOW_OCCLUSION_CULLING = 1 << 7,
			ALLOW_SHADOW_ATLAS_PACKING = 1 << 8,

			ALLOW_EVERYTHING = ~0u
		};
		uint32_t flags = EMPTY;

		// vz::renderer::UpdateVisibility() fills these:
		vz::primitive::Frustum frustum;
		vz::vector<uint32_t> visibleObjects;
		vz::vector<uint32_t> visibleDecals;
		vz::vector<uint32_t> visibleEnvProbes;
		vz::vector<uint32_t> visibleEmitters;
		vz::vector<uint32_t> visibleLights;
		vz::rectpacker::State shadow_packer;
		vz::rectpacker::Rect rain_blocker_shadow_rect;
		vz::vector<vz::rectpacker::Rect> visibleLightShadowRects;

		std::atomic<uint32_t> object_counter;
		std::atomic<uint32_t> light_counter;
		std::atomic<uint32_t> decal_counter;

		vz::SpinLock locker;
		bool planar_reflection_visible = false;
		float closestRefPlane = std::numeric_limits<float>::max();
		XMFLOAT4 reflectionPlane = XMFLOAT4(0, 1, 0, 0);
		std::atomic_bool volumetriclight_request{ false };

		void Clear()
		{
			visibleObjects.clear();
			visibleLights.clear();
			visibleDecals.clear();
			visibleEnvProbes.clear();
			visibleEmitters.clear();

			object_counter.store(0);
			light_counter.store(0);
			decal_counter.store(0);

			closestRefPlane = std::numeric_limits<float>::max();
			planar_reflection_visible = false;
			volumetriclight_request.store(false);
		}

		bool IsRequestedPlanarReflections() const
		{
			return planar_reflection_visible;
		}
		bool IsRequestedVolumetricLights() const
		{
			return volumetriclight_request.load();
		}
	};

	// Performs frustum culling.
	void UpdateVisibility(Visibility& vis);
	// Prepares the scene for rendering
	void UpdatePerFrameData(
		vz::scene::Scene& scene,
		const Visibility& vis,
		FrameCB& frameCB,
		float dt
	);
	// Updates the GPU state according to the previously called UpdatePerFrameData()
	void UpdateRenderData(
		const Visibility& vis,
		const FrameCB& frameCB,
		vz::graphics::CommandList cmd
	);

	// Updates those GPU states that can be async
	void UpdateRenderDataAsync(
		const Visibility& vis,
		const FrameCB& frameCB,
		vz::graphics::CommandList cmd
	);

	void UpdateRaytracingAccelerationStructures(const vz::scene::Scene& scene, vz::graphics::CommandList cmd);

	// Binds all common constant buffers and samplers that may be used in all shaders
	void BindCommonResources(vz::graphics::CommandList cmd);
	// Updates the per camera constant buffer need to call for each different camera that is used when calling DrawScene() and the like
	//	camera_previous : camera from previous frame, used for reprojection effects.
	//	camera_reflection : camera that renders planar reflection
	void BindCameraCB(
		const vz::scene::CameraComponent& camera,
		const vz::scene::CameraComponent& camera_previous,
		const vz::scene::CameraComponent& camera_reflection,
		vz::graphics::CommandList cmd
	);


	enum DRAWSCENE_FLAGS
	{
		DRAWSCENE_OPAQUE = 1 << 0, // include opaque objects
		DRAWSCENE_TRANSPARENT = 1 << 1, // include transparent objects
		DRAWSCENE_OCCLUSIONCULLING = 1 << 2, // enable skipping objects based on occlusion culling results
		DRAWSCENE_TESSELLATION = 1 << 3, // enable tessellation
		//DRAWSCENE_HAIRPARTICLE = 1 << 4, // include hair particles
		DRAWSCENE_IMPOSTOR = 1 << 5, // include impostors
		DRAWSCENE_OCEAN = 1 << 6, // include ocean
		DRAWSCENE_SKIP_PLANAR_REFLECTION_OBJECTS = 1 << 7, // don't draw subsets which have planar reflection material
		DRAWSCENE_FOREGROUND_ONLY = 1 << 8, // only include objects that are tagged as foreground
		DRAWSCENE_MAINCAMERA = 1 << 9, // If this is active, then ObjectComponent with SetNotVisibleInMainCamera(true) won't be drawn
	};

	// Draw the world from a camera. You must call BindCameraCB() at least once in this frame prior to this
	void DrawScene(
		const Visibility& vis,
		vz::enums::RENDERPASS renderPass,
		vz::graphics::CommandList cmd,
		uint32_t flags = DRAWSCENE_OPAQUE
	);

	// Process deferred requests such as AddDeferredMIPGen and AddDeferredBlockCompression:
	void ProcessDeferredTextureRequests(vz::graphics::CommandList cmd);

	// Compute volumetric cloud shadow data
	void ComputeVolumetricCloudShadows(
		vz::graphics::CommandList cmd,
		const vz::graphics::Texture* weatherMapFirst = nullptr,
		const vz::graphics::Texture* weatherMapSecond = nullptr
	);

	// Compute essential SkyAtmosphere textures for lighting, skyviewlut and cameravolume.
	void ComputeSkyAtmosphereTextures(vz::graphics::CommandList cmd);
	// Update SkyViewLut independently, used primarily for environtment probes.
	void ComputeSkyAtmosphereSkyViewLut(vz::graphics::CommandList cmd);
	// Update CameraVolumeLut independently, used primarily for environtment probes.
	void ComputeSkyAtmosphereCameraVolumeLut(vz::graphics::CommandList cmd);

	// Draw skydome centered to camera.
	void DrawSky(const vz::scene::Scene& scene, vz::graphics::CommandList cmd);
	// Draw shadow maps for each visible light that has associated shadow maps
	void DrawSun(vz::graphics::CommandList cmd);
	// Draw shadow maps for each visible light that has associated shadow maps
	void DrawShadowmaps(
		const Visibility& vis,
		vz::graphics::CommandList cmd
	);
	// Draw debug world. You must also enable what parts to draw, eg. SetToDrawGridHelper, etc, see implementation for details what can be enabled.
	void DrawDebugWorld(
		const vz::scene::Scene& scene,
		const vz::scene::CameraComponent& camera,
		const vz::Canvas& canvas,
		vz::graphics::CommandList cmd
	);
	// Draw Soft offscreen particles.
	void DrawSoftParticles(
		const Visibility& vis,
		bool distortion, 
		vz::graphics::CommandList cmd
	);
	// Draw the sprites and fonts from the scene
	void DrawSpritesAndFonts(
		const vz::scene::Scene& scene,
		const vz::scene::CameraComponent& camera,
		bool distortion,
		vz::graphics::CommandList cmd
	);
	// Draw simple light visualizer geometries
	void DrawLightVisualizers(
		const Visibility& vis,
		vz::graphics::CommandList cmd
	);
	// Draw volumetric light scattering effects
	void DrawVolumeLights(
		const Visibility& vis,
		vz::graphics::CommandList cmd
	);
	// Draw Lens Flares for lights that have them enabled
	void DrawLensFlares(
		const Visibility& vis,
		vz::graphics::CommandList cmd,
		const vz::graphics::Texture* texture_directional_occlusion = nullptr
	);
	// Call once per frame to re-render out of date environment probes
	void RefreshEnvProbes(const Visibility& vis, vz::graphics::CommandList cmd);
	// Call once per frame to re-render out of date impostors
	void RefreshImpostors(const vz::scene::Scene& scene, vz::graphics::CommandList cmd);
	// Call once per frame to repack out of date lightmaps in the atlas
	void RefreshLightmaps(const vz::scene::Scene& scene, vz::graphics::CommandList cmd);
	// Run a compute shader that will resolve a MSAA depth buffer to a single-sample texture
	void ResolveMSAADepthBuffer(const vz::graphics::Texture& dst, const vz::graphics::Texture& src, vz::graphics::CommandList cmd);
	void DownsampleDepthBuffer(const vz::graphics::Texture& src, vz::graphics::CommandList cmd);

	struct TiledLightResources
	{
		XMUINT2 tileCount = {};
		vz::graphics::GPUBuffer tileFrustums; // entity culling frustums
		vz::graphics::GPUBuffer entityTiles; // culled entity indices
	};
	void CreateTiledLightResources(TiledLightResources& res, XMUINT2 resolution);
	// Compute light grid tiles
	void ComputeTiledLightCulling(
		const TiledLightResources& res,
		const Visibility& vis,
		const vz::graphics::Texture& debugUAV,
		vz::graphics::CommandList cmd
	);

	struct LuminanceResources
	{
		vz::graphics::GPUBuffer luminance;
	};
	void CreateLuminanceResources(LuminanceResources& res, XMUINT2 resolution);
	// Compute the luminance for the source image and return the texture containing the luminance value in pixel [0,0]
	void ComputeLuminance(
		const LuminanceResources& res,
		const vz::graphics::Texture& sourceImage,
		vz::graphics::CommandList cmd,
		float adaption_rate = 1,
		float eyeadaptionkey = 0.115f
	);

	struct BloomResources
	{
		vz::graphics::Texture texture_bloom;
		vz::graphics::Texture texture_temp;
	};
	void CreateBloomResources(BloomResources& res, XMUINT2 resolution);
	void ComputeBloom(
		const BloomResources& res,
		const vz::graphics::Texture& input,
		vz::graphics::CommandList cmd,
		float threshold = 1.0f, // cutoff value, pixels below this will not contribute to bloom
		float exposure = 1.0f,
		const vz::graphics::GPUBuffer* buffer_luminance = nullptr
	);

	void ComputeShadingRateClassification(
		const vz::graphics::Texture& output,
		const vz::graphics::Texture& debugUAV,
		vz::graphics::CommandList cmd
	);

	struct VisibilityResources
	{
		XMUINT2 tile_count = {};
		vz::graphics::GPUBuffer bins;
		vz::graphics::GPUBuffer binned_tiles;
		vz::graphics::Texture texture_payload_0;
		vz::graphics::Texture texture_payload_1;
		vz::graphics::Texture texture_normals;
		vz::graphics::Texture texture_roughness;

		// You can request any of these extra outputs to be written by VisibilityResolve:
		const vz::graphics::Texture* depthbuffer = nullptr; // depth buffer that matches with post projection
		const vz::graphics::Texture* lineardepth = nullptr; // depth buffer in linear space in [0,1] range
		const vz::graphics::Texture* primitiveID_resolved = nullptr; // resolved from MSAA texture_visibility input
	};
	void CreateVisibilityResources(VisibilityResources& res, XMUINT2 resolution);
	void Visibility_Prepare(
		const VisibilityResources& res,
		const vz::graphics::Texture& input_primitiveID, // can be MSAA
		vz::graphics::CommandList cmd
	);
	void Visibility_Surface(
		const VisibilityResources& res,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	void Visibility_Surface_Reduced(
		const VisibilityResources& res,
		vz::graphics::CommandList cmd
	);
	void Visibility_Shade(
		const VisibilityResources& res,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	void Visibility_Velocity(
		const VisibilityResources& res,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);

	// Surfel GI: diffuse GI with ray tracing from surfels
	struct SurfelGIResources
	{
		vz::graphics::Texture result;
	};
	void CreateSurfelGIResources(SurfelGIResources& res, XMUINT2 resolution);
	void SurfelGI_Coverage(
		const SurfelGIResources& res,
		const vz::scene::Scene& scene,
		const vz::graphics::Texture& debugUAV,
		vz::graphics::CommandList cmd
	);
	void SurfelGI(
		const SurfelGIResources& res,
		const vz::scene::Scene& scene,
		vz::graphics::CommandList cmd
	);

	// DDGI: Dynamic Diffuse Global Illumination (probe-based ray tracing)
	void DDGI(
		const vz::scene::Scene& scene,
		vz::graphics::CommandList cmd
	);

	// VXGI: Voxel-based Global Illumination (voxel cone tracing-based)
	struct VXGIResources
	{
		vz::graphics::Texture diffuse;
		vz::graphics::Texture specular;
		mutable bool pre_clear = true;

		bool IsValid() const { return diffuse.IsValid(); }
	};
	void CreateVXGIResources(VXGIResources& res, XMUINT2 resolution);
	void VXGI_Voxelize(
		const Visibility& vis,
		vz::graphics::CommandList cmd
	);
	// Resolve VXGI to screen
	void VXGI_Resolve(
		const VXGIResources& res,
		const vz::scene::Scene& scene,
		vz::graphics::Texture texture_lineardepth,
		vz::graphics::CommandList cmd
	);

	void Postprocess_Blur_Gaussian(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& temp,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		int mip_src = -1,
		int mip_dst = -1,
		bool wide = false
	);
	void Postprocess_Blur_Bilateral(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& lineardepth,
		const vz::graphics::Texture& temp,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float depth_threshold = 1.0f,
		int mip_src = -1,
		int mip_dst = -1,
		bool wide = false
	);
	struct SSAOResources
	{
		vz::graphics::Texture temp;
	};
	void CreateSSAOResources(SSAOResources& res, XMUINT2 resolution);
	void Postprocess_SSAO(
		const SSAOResources& res,
		const vz::graphics::Texture& output,
		const vz::graphics::Texture& lineardepth,
		vz::graphics::CommandList cmd,
		float range = 1.0f,
		uint32_t samplecount = 16,
		float power = 1.0f
	);
	void Postprocess_HBAO(
		const SSAOResources& res,
		const vz::scene::CameraComponent& camera,
		const vz::graphics::Texture& lineardepth,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float power = 1.0f
		);
	struct MSAOResources
	{
		mutable bool cleared = false;
		vz::graphics::Texture texture_lineardepth_downsize1;
		vz::graphics::Texture texture_lineardepth_tiled1;
		vz::graphics::Texture texture_lineardepth_downsize2;
		vz::graphics::Texture texture_lineardepth_tiled2;
		vz::graphics::Texture texture_lineardepth_downsize3;
		vz::graphics::Texture texture_lineardepth_tiled3;
		vz::graphics::Texture texture_lineardepth_downsize4;
		vz::graphics::Texture texture_lineardepth_tiled4;
		vz::graphics::Texture texture_ao_merged1;
		vz::graphics::Texture texture_ao_hq1;
		vz::graphics::Texture texture_ao_smooth1;
		vz::graphics::Texture texture_ao_merged2;
		vz::graphics::Texture texture_ao_hq2;
		vz::graphics::Texture texture_ao_smooth2;
		vz::graphics::Texture texture_ao_merged3;
		vz::graphics::Texture texture_ao_hq3;
		vz::graphics::Texture texture_ao_smooth3;
		vz::graphics::Texture texture_ao_merged4;
		vz::graphics::Texture texture_ao_hq4;
	};
	void CreateMSAOResources(MSAOResources& res, XMUINT2 resolution);
	void Postprocess_MSAO(
		const MSAOResources& res,
		const vz::scene::CameraComponent& camera,
		const vz::graphics::Texture& lineardepth,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float power = 1.0f
		);
	struct RTAOResources
	{
		vz::graphics::Texture normals;

		mutable int frame = 0;
		vz::graphics::GPUBuffer tiles;
		vz::graphics::GPUBuffer metadata;
		vz::graphics::Texture scratch[2];
		vz::graphics::Texture moments[2];
	};
	void CreateRTAOResources(RTAOResources& res, XMUINT2 resolution);
	void Postprocess_RTAO(
		const RTAOResources& res,
		const vz::scene::Scene& scene,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float range = 1.0f,
		float power = 1.0f
	);
	struct RTDiffuseResources
	{
		mutable int frame = 0;
		vz::graphics::Texture texture_rayIndirectDiffuse;
		vz::graphics::Texture texture_spatial;
		vz::graphics::Texture texture_spatial_variance;
		vz::graphics::Texture texture_temporal[2];
		vz::graphics::Texture texture_temporal_variance[2];
		vz::graphics::Texture texture_bilateral_temp;
	};
	void CreateRTDiffuseResources(RTDiffuseResources& res, XMUINT2 resolution);
	void Postprocess_RTDiffuse(
		const RTDiffuseResources& res,
		const vz::scene::Scene& scene,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float range = 1000.0f
	);
	struct RTReflectionResources
	{
		mutable int frame = 0;
		vz::graphics::Texture texture_rayIndirectSpecular;
		vz::graphics::Texture texture_rayDirectionPDF;
		vz::graphics::Texture texture_rayLengths;
		vz::graphics::Texture texture_resolve;
		vz::graphics::Texture texture_resolve_variance;
		vz::graphics::Texture texture_resolve_reprojectionDepth;
		vz::graphics::Texture texture_temporal[2];
		vz::graphics::Texture texture_temporal_variance[2];
		vz::graphics::Texture texture_bilateral_temp;
	};
	void CreateRTReflectionResources(RTReflectionResources& res, XMUINT2 resolution);
	void Postprocess_RTReflection(
		const RTReflectionResources& res,
		const vz::scene::Scene& scene,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float range = 1000.0f,
		float roughnessCutoff = 0.5f
	);
	struct SSRResources
	{
		mutable int frame = 0;
		vz::graphics::Texture texture_tile_minmax_roughness_horizontal;
		vz::graphics::Texture texture_tile_minmax_roughness;
		vz::graphics::Texture texture_depth_hierarchy;
		vz::graphics::Texture texture_rayIndirectSpecular;
		vz::graphics::Texture texture_rayDirectionPDF;
		vz::graphics::Texture texture_rayLengths;
		vz::graphics::Texture texture_resolve;
		vz::graphics::Texture texture_resolve_variance;
		vz::graphics::Texture texture_resolve_reprojectionDepth;
		vz::graphics::Texture texture_temporal[2];
		vz::graphics::Texture texture_temporal_variance[2];
		vz::graphics::Texture texture_bilateral_temp;
		vz::graphics::GPUBuffer buffer_tile_tracing_statistics;
		vz::graphics::GPUBuffer buffer_tiles_tracing_earlyexit;
		vz::graphics::GPUBuffer buffer_tiles_tracing_cheap;
		vz::graphics::GPUBuffer buffer_tiles_tracing_expensive;
	};
	void CreateSSRResources(SSRResources& res, XMUINT2 resolution);
	void Postprocess_SSR(
		const SSRResources& res,
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float roughnessCutoff = 0.6f
	);
	struct RTShadowResources
	{
		vz::graphics::Texture temporal[2];
		vz::graphics::Texture normals;

		mutable int frame = 0;
		vz::graphics::GPUBuffer tiles;
		vz::graphics::GPUBuffer metadata;
		vz::graphics::Texture scratch[4][2];
		vz::graphics::Texture moments[4][2];
		vz::graphics::Texture denoised;
	};
	void CreateRTShadowResources(RTShadowResources& res, XMUINT2 resolution);
	void Postprocess_RTShadow(
		const RTShadowResources& res,
		const vz::scene::Scene& scene,
		const vz::graphics::GPUBuffer& entityTiles_Opaque,
		const vz::graphics::Texture& lineardepth,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	struct ScreenSpaceShadowResources
	{
		int placeholder = 0;
	};
	void CreateScreenSpaceShadowResources(ScreenSpaceShadowResources& res, XMUINT2 resolution);
	void Postprocess_ScreenSpaceShadow(
		const ScreenSpaceShadowResources& res,
		const vz::graphics::GPUBuffer& entityTiles_Opaque,
		const vz::graphics::Texture& lineardepth,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float range = 1,
		uint32_t samplecount = 16
	);
	void Postprocess_LightShafts(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		const XMFLOAT2& center,
		float strength = 0.1f
	);
	struct DepthOfFieldResources
	{
		vz::graphics::Texture texture_tilemax_horizontal;
		vz::graphics::Texture texture_tilemin_horizontal;
		vz::graphics::Texture texture_tilemax;
		vz::graphics::Texture texture_tilemin;
		vz::graphics::Texture texture_neighborhoodmax;
		vz::graphics::Texture texture_presort;
		vz::graphics::Texture texture_prefilter;
		vz::graphics::Texture texture_main;
		vz::graphics::Texture texture_postfilter;
		vz::graphics::Texture texture_alpha1;
		vz::graphics::Texture texture_alpha2;
		vz::graphics::GPUBuffer buffer_tile_statistics;
		vz::graphics::GPUBuffer buffer_tiles_earlyexit;
		vz::graphics::GPUBuffer buffer_tiles_cheap;
		vz::graphics::GPUBuffer buffer_tiles_expensive;

		bool IsValid() const { return texture_tilemax_horizontal.IsValid(); }
	};
	void CreateDepthOfFieldResources(DepthOfFieldResources& res, XMUINT2 resolution);
	void Postprocess_DepthOfField(
		const DepthOfFieldResources& res,
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float coc_scale = 10,
		float max_coc = 18
	);
	void Postprocess_Outline(
		const vz::graphics::Texture& input,
		vz::graphics::CommandList cmd,
		float threshold = 0.1f,
		float thickness = 1.0f,
		const XMFLOAT4& color = XMFLOAT4(0, 0, 0, 1)
	);
	struct MotionBlurResources
	{
		vz::graphics::Texture texture_tilemin_horizontal;
		vz::graphics::Texture texture_tilemax_horizontal;
		vz::graphics::Texture texture_tilemax;
		vz::graphics::Texture texture_tilemin;
		vz::graphics::Texture texture_neighborhoodmax;
		vz::graphics::GPUBuffer buffer_tile_statistics;
		vz::graphics::GPUBuffer buffer_tiles_earlyexit;
		vz::graphics::GPUBuffer buffer_tiles_cheap;
		vz::graphics::GPUBuffer buffer_tiles_expensive;

		bool IsValid() const { return texture_tilemax_horizontal.IsValid(); }
	};
	void CreateMotionBlurResources(MotionBlurResources& res, XMUINT2 resolution);
	void Postprocess_MotionBlur(
		const MotionBlurResources& res,
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float strength = 100.0f
	);
	struct AerialPerspectiveResources
	{
		vz::graphics::Texture texture_output;
	};
	void CreateAerialPerspectiveResources(AerialPerspectiveResources& res, XMUINT2 resolution);
	void Postprocess_AerialPerspective(
		const AerialPerspectiveResources& res,
		vz::graphics::CommandList cmd
	);
	struct VolumetricCloudResources
	{
		mutable int frame = 0;
		XMUINT2 final_resolution = {};
		vz::graphics::Texture texture_cloudRender;
		vz::graphics::Texture texture_cloudDepth;
		vz::graphics::Texture texture_reproject[2];
		vz::graphics::Texture texture_reproject_depth[2];
		vz::graphics::Texture texture_reproject_additional[2];
		vz::graphics::Texture texture_cloudMask;
	};
	void CreateVolumetricCloudResources(VolumetricCloudResources& res, XMUINT2 resolution);
	void Postprocess_VolumetricClouds(
		const VolumetricCloudResources& res,
		vz::graphics::CommandList cmd,
		const vz::scene::CameraComponent& camera,
		const vz::scene::CameraComponent& camera_previous,
		const vz::scene::CameraComponent& camera_reflection,
		const bool jitterEnabled,
		const vz::graphics::Texture* weatherMapFirst = nullptr,
		const vz::graphics::Texture* weatherMapSecond = nullptr
	);
	void Postprocess_VolumetricClouds_Upsample(
		const VolumetricCloudResources& res,
		vz::graphics::CommandList cmd
	);
	void Postprocess_FXAA(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	struct TemporalAAResources
	{
		mutable int frame = 0;
		vz::graphics::Texture texture_temporal[2];

		bool IsValid() const { return texture_temporal[0].IsValid(); }
		const vz::graphics::Texture* GetCurrent() const { return &texture_temporal[frame % arraysize(texture_temporal)]; }
		const vz::graphics::Texture* GetHistory() const { return &texture_temporal[(frame + 1) % arraysize(texture_temporal)]; }
	};
	void CreateTemporalAAResources(TemporalAAResources& res, XMUINT2 resolution);
	void Postprocess_TemporalAA(
		const TemporalAAResources& res,
		const vz::graphics::Texture& input,
		vz::graphics::CommandList cmd
	);
	void Postprocess_Sharpen(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float amount = 1.0f
	);
	enum class Tonemap
	{
		Reinhard,
		ACES
	};
	void Postprocess_Tonemap(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float exposure,
		float brightness,
		float contrast,
		float saturation,
		bool dither,
		const vz::graphics::Texture* texture_colorgradinglut = nullptr,
		const vz::graphics::Texture* texture_distortion = nullptr,
		const vz::graphics::GPUBuffer* buffer_luminance = nullptr,
		const vz::graphics::Texture* texture_bloom = nullptr,
		vz::graphics::ColorSpace display_colorspace = vz::graphics::ColorSpace::SRGB,
		Tonemap tonemap = Tonemap::Reinhard 
	);
	void Postprocess_FSR(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& temp,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float sharpness = 1.0f
	);
	struct FSR2Resources
	{
		struct Fsr2Constants
		{
			int32_t   renderSize[2];
			int32_t   displaySize[2];
			uint32_t  lumaMipDimensions[2];
			uint32_t  lumaMipLevelToUse;
			uint32_t  frameIndex;
			float     displaySizeRcp[2];
			float     jitterOffset[2];
			float     deviceToViewDepth[4];
			float     depthClipUVScale[2];
			float     postLockStatusUVScale[2];
			float     reactiveMaskDimRcp[2];
			float     motionVectorScale[2];
			float     downscaleFactor[2];
			float     preExposure;
			float     tanHalfFOV;
			float     motionVectorJitterCancellation[2];
			float     jitterPhaseCount;
			float     lockInitialLifetime;
			float     lockTickDelta;
			float     deltaTime;
			float     dynamicResChangeFactor;
			float     lumaMipRcp;
		};
		mutable Fsr2Constants fsr2_constants = {};
		vz::graphics::Texture adjusted_color;
		vz::graphics::Texture luminance_current;
		vz::graphics::Texture luminance_history;
		vz::graphics::Texture exposure;
		vz::graphics::Texture previous_depth;
		vz::graphics::Texture dilated_depth;
		vz::graphics::Texture dilated_motion;
		vz::graphics::Texture dilated_reactive;
		vz::graphics::Texture disocclusion_mask;
		vz::graphics::Texture lock_status[2];
		vz::graphics::Texture reactive_mask;
		vz::graphics::Texture lanczos_lut;
		vz::graphics::Texture maximum_bias_lut;
		vz::graphics::Texture spd_global_atomic;
		vz::graphics::Texture output_internal[2];

		bool IsValid() const { return adjusted_color.IsValid(); }

		XMFLOAT2 GetJitter() const;
	};
	void CreateFSR2Resources(FSR2Resources& res, XMUINT2 render_resolution, XMUINT2 presentation_resolution);
	void Postprocess_FSR2(
		const FSR2Resources& res,
		const vz::scene::CameraComponent& camera,
		const vz::graphics::Texture& input_pre_alpha,
		const vz::graphics::Texture& input_post_alpha,
		const vz::graphics::Texture& input_depth,
		const vz::graphics::Texture& input_velocity,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float dt, // delta time in seconds
		float sharpness = 0.5f
	);
	void Postprocess_Chromatic_Aberration(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		float amount = 1.0f
	);
	void Postprocess_Upsample_Bilateral(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& lineardepth,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		bool is_pixelshader = false,
		float threshold = 1.0f
	);
	void Postprocess_Downsample4x(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	void Postprocess_Lineardepth(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	void Postprocess_NormalsFromDepth(
		const vz::graphics::Texture& depthbuffer,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	void Postprocess_Underwater(
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);
	void Postprocess_Custom(
		const vz::graphics::Shader& computeshader,
		const vz::graphics::Texture& input,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd,
		const XMFLOAT4& params0 = XMFLOAT4(0, 0, 0, 0),
		const XMFLOAT4& params1 = XMFLOAT4(0, 0, 0, 0),
		const char* debug_name = "Postprocess_Custom"
	);

	void YUV_to_RGB(
		const vz::graphics::Texture& input,
		int input_subresource_luminance,
		int input_subresource_chrominance,
		const vz::graphics::Texture& output,
		vz::graphics::CommandList cmd
	);

	// This performs copies from separate depth and stencil shader resource textures
	//	into hardware depthStencil buffer that supports depth/stencil testing
	//	This is only supported by QUEUE_GRAPHICS!
	//	stencil_bits_to_copy : bitmask can be specified to mask out stencil bits that will be copied
	//	depthstencil_already_cleared : if false, it will be fully cleared if required; if true, it will be left intact
	void CopyDepthStencil(
		const vz::graphics::Texture* input_depth,
		const vz::graphics::Texture* input_stencil,
		const vz::graphics::Texture& output_depth_stencil,
		vz::graphics::CommandList cmd,
		uint8_t stencil_bits_to_copy = 0xFF,
		bool depthstencil_already_cleared = false
	);

	// Render the scene with ray tracing
	void RayTraceScene(
		const vz::scene::Scene& scene,
		const vz::graphics::Texture& output,
		int accumulation_sample,
		vz::graphics::CommandList cmd,
		const vz::graphics::Texture* output_albedo = nullptr,
		const vz::graphics::Texture* output_normal = nullptr,
		const vz::graphics::Texture* output_depth = nullptr,
		const vz::graphics::Texture* output_stencil = nullptr,
		const vz::graphics::Texture* output_depth_stencil = nullptr
	);
	// Render the scene BVH with ray tracing to the screen
	void RayTraceSceneBVH(const vz::scene::Scene& scene, vz::graphics::CommandList cmd);

	// Render occluders against a depth buffer
	void OcclusionCulling_Reset(const Visibility& vis, vz::graphics::CommandList cmd);
	void OcclusionCulling_Render(const vz::scene::CameraComponent& camera, const Visibility& vis, vz::graphics::CommandList cmd);
	void OcclusionCulling_Resolve(const Visibility& vis, vz::graphics::CommandList cmd);

	enum MIPGENFILTER
	{
		MIPGENFILTER_POINT,
		MIPGENFILTER_LINEAR,
		MIPGENFILTER_GAUSSIAN,
	};
	struct MIPGEN_OPTIONS
	{
		int arrayIndex = -1;
		const vz::graphics::Texture* gaussian_temp = nullptr;
		bool preserve_coverage = false;
		bool wide_gauss = false;
	};
	void GenerateMipChain(const vz::graphics::Texture& texture, MIPGENFILTER filter, vz::graphics::CommandList cmd, const MIPGEN_OPTIONS& options = {});

	// Compress a texture into Block Compressed format
	//	texture_src	: source uncompressed texture
	//	texture_bc	: destination comporessed texture, must be a supported BC format (BC1/BC3/BC4/BC5/BC6H_UFLOAT)
	//	Currently this will handle simple Texture2D with mip levels, and additionally BC6H cubemap
	void BlockCompress(const vz::graphics::Texture& texture_src, const vz::graphics::Texture& texture_bc, vz::graphics::CommandList cmd, uint32_t dst_slice_offset = 0);

	enum BORDEREXPANDSTYLE
	{
		BORDEREXPAND_DISABLE,
		BORDEREXPAND_WRAP,
		BORDEREXPAND_CLAMP,
	};
	// Performs copy operation even between different texture formats
	//	NOTE: DstMIP can be specified as -1 to use main subresource, otherwise the subresource (>=0) must have been generated explicitly!
	//	Can also expand border region according to desired sampler func
	void CopyTexture2D(
		const vz::graphics::Texture& dst, int DstMIP, int DstX, int DstY,
		const vz::graphics::Texture& src, int SrcMIP, int SrcX, int SrcY,
		vz::graphics::CommandList cmd,
		BORDEREXPANDSTYLE borderExpand = BORDEREXPAND_DISABLE,
		bool srgb_convert = false
	);

	void DrawWaterRipples(const Visibility& vis, vz::graphics::CommandList cmd);



	void SetShadowProps2D(int max_resolution);
	void SetShadowPropsCube(int max_resolution);



	void SetTransparentShadowsEnabled(float value);
	float GetTransparentShadowsEnabled();
	void SetWireRender(bool value);
	bool IsWireRender();
	void SetToDrawDebugBoneLines(bool param);
	bool GetToDrawDebugBoneLines();
	void SetToDrawDebugPartitionTree(bool param);
	bool GetToDrawDebugPartitionTree();
	bool GetToDrawDebugEnvProbes();
	void SetToDrawDebugEnvProbes(bool value);
	void SetToDrawDebugEmitters(bool param);
	bool GetToDrawDebugEmitters();
	void SetToDrawDebugForceFields(bool param);
	bool GetToDrawDebugForceFields();
	void SetToDrawDebugCameras(bool param);
	bool GetToDrawDebugCameras();
	void SetToDrawDebugColliders(bool param);
	bool GetToDrawDebugColliders();
	bool GetToDrawGridHelper();
	void SetToDrawGridHelper(bool value);
	bool GetToDrawVoxelHelper();
	void SetToDrawVoxelHelper(bool value, int clipmap_level);
	void SetDebugLightCulling(bool enabled);
	bool GetDebugLightCulling();
	void SetAdvancedLightCulling(bool enabled);
	bool GetAdvancedLightCulling();
	void SetVariableRateShadingClassification(bool enabled);
	bool GetVariableRateShadingClassification();
	void SetVariableRateShadingClassificationDebug(bool enabled);
	bool GetVariableRateShadingClassificationDebug();
	void SetOcclusionCullingEnabled(bool enabled);
	bool GetOcclusionCullingEnabled();
	void SetTemporalAAEnabled(bool enabled);
	bool GetTemporalAAEnabled();
	void SetTemporalAADebugEnabled(bool enabled);
	bool GetTemporalAADebugEnabled();
	void SetFreezeCullingCameraEnabled(bool enabled);
	bool GetFreezeCullingCameraEnabled();
	void SetVXGIEnabled(bool enabled);
	bool GetVXGIEnabled();
	void SetVXGIReflectionsEnabled(bool enabled);
	bool GetVXGIReflectionsEnabled();
	void SetGameSpeed(float value);
	float GetGameSpeed();
	void SetRaytraceBounceCount(uint32_t bounces);
	uint32_t GetRaytraceBounceCount();
	void SetRaytraceDebugBVHVisualizerEnabled(bool value);
	bool GetRaytraceDebugBVHVisualizerEnabled();
	void SetRaytracedShadowsEnabled(bool value);
	bool GetRaytracedShadowsEnabled();
	void SetTessellationEnabled(bool value);
	bool GetTessellationEnabled();
	void SetDisableAlbedoMaps(bool value);
	bool IsDisableAlbedoMaps();
	void SetForceDiffuseLighting(bool value);
	bool IsForceDiffuseLighting();
	void SetScreenSpaceShadowsEnabled(bool value);
	bool GetScreenSpaceShadowsEnabled();
	void SetSurfelGIEnabled(bool value);
	bool GetSurfelGIEnabled();
	void SetSurfelGIDebugEnabled(SURFEL_DEBUG value);
	SURFEL_DEBUG GetSurfelGIDebugEnabled();
	void SetDDGIEnabled(bool value);
	bool GetDDGIEnabled();
	void SetDDGIDebugEnabled(bool value);
	bool GetDDGIDebugEnabled();
	void SetDDGIRayCount(uint32_t value);
	uint32_t GetDDGIRayCount();
	void SetDDGIBlendSpeed(float value);
	float GetDDGIBlendSpeed();
	void SetGIBoost(float value);
	float GetGIBoost();
	void Workaround( const int bug, vz::graphics::CommandList cmd);

	// Gets pick ray according to the current screen resolution and pointer coordinates. Can be used as input into RayIntersectWorld()
	vz::primitive::Ray GetPickRay(long cursorX, long cursorY, const vz::Canvas& canvas, const vz::scene::CameraComponent& camera = vz::scene::GetCamera());


	// Add box to render in next frame. It will be rendered in DrawDebugWorld()
	void DrawBox(const XMFLOAT4X4& boxMatrix, const XMFLOAT4& color = XMFLOAT4(1,1,1,1));
	// Add sphere to render in next frame. It will be rendered in DrawDebugWorld()
	void DrawSphere(const vz::primitive::Sphere& sphere, const XMFLOAT4& color = XMFLOAT4(1, 1, 1, 1));
	// Add capsule to render in next frame. It will be rendered in DrawDebugWorld()
	void DrawCapsule(const vz::primitive::Capsule& capsule, const XMFLOAT4& color = XMFLOAT4(1, 1, 1, 1));

	struct RenderableLine
	{
		XMFLOAT3 start = XMFLOAT3(0, 0, 0);
		XMFLOAT3 end = XMFLOAT3(0, 0, 0);
		XMFLOAT4 color_start = XMFLOAT4(1, 1, 1, 1);
		XMFLOAT4 color_end = XMFLOAT4(1, 1, 1, 1);
	};
	// Add line to render in the next frame. It will be rendered in DrawDebugWorld()
	void DrawLine(const RenderableLine& line);

	struct RenderableLine2D
	{
		XMFLOAT2 start = XMFLOAT2(0, 0);
		XMFLOAT2 end = XMFLOAT2(0, 0);
		XMFLOAT4 color_start = XMFLOAT4(1, 1, 1, 1);
		XMFLOAT4 color_end = XMFLOAT4(1, 1, 1, 1);
	};
	// Add 2D line to render in the next frame. It will be rendered in DrawDebugWorld() in screen space
	void DrawLine(const RenderableLine2D& line);

	struct RenderablePoint
	{
		XMFLOAT3 position = XMFLOAT3(0, 0, 0);
		float size = 1.0f;
		XMFLOAT4 color = XMFLOAT4(1, 1, 1, 1);
	};
	// Add point to render in the next frame. It will be rendered in DrawDebugWorld() as an X
	void DrawPoint(const RenderablePoint& point);

	struct RenderableTriangle
	{
		XMFLOAT3 positionA = XMFLOAT3(0, 0, 0);
		XMFLOAT4 colorA = XMFLOAT4(1, 1, 1, 1);
		XMFLOAT3 positionB = XMFLOAT3(0, 0, 0);
		XMFLOAT4 colorB = XMFLOAT4(1, 1, 1, 1);
		XMFLOAT3 positionC = XMFLOAT3(0, 0, 0);
		XMFLOAT4 colorC = XMFLOAT4(1, 1, 1, 1);
	};
	// Add triangle to render in the next frame. It will be rendered in DrawDebugWorld()
	void DrawTriangle(const RenderableTriangle& triangle, bool wireframe = false);

	struct DebugTextParams
	{
		XMFLOAT3 position = XMFLOAT3(0, 0, 0);
		int pixel_height = 32;
		float scaling = 1;
		XMFLOAT4 color = XMFLOAT4(1, 1, 1, 1);
		enum FLAGS // do not change values, it's bound to lua manually!
		{
			NONE = 0,
			DEPTH_TEST = 1 << 0,		// text can be occluded by geometry
			CAMERA_FACING = 1 << 1,		// text will be rotated to face the camera
			CAMERA_SCALING = 1 << 2,	// text will be always the same size, independent of distance to camera
		};
		uint32_t flags = NONE;
	};
	// Add text to render in the next frame. It will be rendered in DrawDebugWorld()
	//	The memory to text doesn't need to be retained by the caller, as it will be copied internally
	void DrawDebugText(const char* text, const DebugTextParams& params);

	struct PaintRadius
	{
		vz::ecs::Entity objectEntity = vz::ecs::INVALID_ENTITY;
		int subset = -1;
		uint32_t uvset = 0;
		float radius = 0;
		XMUINT2 center = {};
		XMUINT2 dimensions = {};
		float rotation = 0;
		uint shape = 0; // 0: circle, 1 : square
	};
	void DrawPaintRadius(const PaintRadius& paintrad);

	// Add voxel grid to be drawn in debug rendering phase.
	//	WARNING: This retains pointer until next call to DrawDebugScene(), so voxel grid must not be destroyed until then!
	void DrawVoxelGrid(const vz::VoxelGrid* voxelgrid);

	// Add path query to be drawn in debug rendering phase.
	//	WARNING: This retains pointer until next call to DrawDebugScene(), so path query must not be destroyed until then!
	void DrawPathQuery(const vz::PathQuery* pathquery);

	// Add a texture that should be mipmapped whenever it is feasible to do so
	void AddDeferredMIPGen(const vz::graphics::Texture& texture, bool preserve_coverage = false);
	void AddDeferredBlockCompression(const vz::graphics::Texture& texture_src, const vz::graphics::Texture& texture_bc);

	struct CustomShader
	{
		std::string name;
		uint32_t filterMask = vz::enums::FILTER_OPAQUE;
		vz::graphics::PipelineState pso[vz::enums::RENDERPASS_COUNT] = {};
	};
	// Registers a custom shader that can be set to materials. 
	//	Returns the ID of the custom shader that can be used with MaterialComponent::SetCustomShaderID()
	int RegisterCustomShader(const CustomShader& customShader);
	const vz::vector<CustomShader>& GetCustomShaders();

};

